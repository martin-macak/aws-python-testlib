---
openapi: '3.0.2'
info:
  title: Test
  description: |
    API
  version: '0.1.0'
  license:
    name: Private
    url: https://fillme.one/license
servers:
  - url: /api/v1

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: false
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

x-amazon-apigateway-binary-media-types:
  - 'application/octet'
  - 'application/octet-stream'
  - 'multipart/form-data'
  - 'image/*'

x-amazon-apigateway-request-validator: params

paths:
  /accounts/{accountId}/sts/tokens/scim/access:
    get:
      tags:
        - STS
      operationId: GetExistingSCIMTokenStatus
      summary: Checks the status of existing SCIM token
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        200:
          $ref: '#/components/responses/GetExistingSCIMTokenStatus'
        "500":
          $ref: '#/components/responses/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${STSIssueTokenFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 29000
        type: 'aws'
        responses:
          .{0}:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              # language=vtl
              application/json: |
                {
                "status": "$input.path('$.TokenStatus')"
                }
          default:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              # language=vtl
              application/json: |
                #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
                {
                "errorCode": "UNEXPECTED_ERROR",
                "errorMessage": "$input.path('$.errorMessage')"
                }
        requestTemplates:
          # language=vtl
          application/json: >
            {
            "CommandType": "GetAccessTokenStatus",
            "AccountId": "$input.params('accountId')",
            "TokenAlias": "iam:federated:scim/${input.params('accountId')}",
            "requestContext": {
            "x_principal_id": "$context.authorizer.principalId",
            "x_account_id": "$input.params('accountId')",
            "correlation_id": "$context.requestId"
            }
            }
        passthroughBehavior: "when_no_templates"

components:
  headers:
    Access-Control-Allow-Methods:
      schema:
        type: string
    Access-Control-Allow-Headers:
      schema:
        type: string
    Access-Control-Allow-Origin:
      schema:
        type: string
    Access-Control-Expose-Headers:
      schema:
        type: string

  parameters:
    accountId:
      name: accountId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
        description: Account ID

    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        maxLength: 256

  requestBodies:
    SCIMRequest:
      description: SCIM request
      content:
        application/json:
          schema:
            type: object

  responses:
    Error:
      description: "Error response"
      headers:
        Access-Control-Allow-Methods:
          $ref: '#/components/headers/Access-Control-Allow-Methods'
        Access-Control-Allow-Headers:
          $ref: '#/components/headers/Access-Control-Allow-Headers'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
      content:
        application/json:
          schema:
            type: object
            title: Error
            properties:
              errorCode:
                type: string
                format: '[A-Z0-9]{,64}'
                example: 'INVALID_REQUEST'
                description: 'Error code, should be unique'
              errorMessage:
                type: string
                example: 'Invalid request'
                description: 'Human readable error message, not with i18n'
            required:
              - errorCode

    SCIMResponse:
      description: SCIM response
      content:
        application/json:
          schema:
            type: object

    GetExistingSCIMTokenStatus:
      description: GetExistingSCIMTokenStatus response
      headers:
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/Access-Control-Allow-Methods"
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/Access-Control-Allow-Headers"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: Token status
                enum:
                  - "ACTIVE"
                  - "INACTIVE"
            required:
              - status

  x-amazon-apigateway-gateway-responses:
    ACCESS_DENIED:
      statusCode: 403
      responseParameters:
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates:
        application/json: '{"message":$context.error.messageString}'

